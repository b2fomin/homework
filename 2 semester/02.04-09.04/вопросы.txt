I) Что такое состояние гонки и к чему оно может привести?
Состояние гонки --- работа программы зависит от того, в каком порядке выполняются
части кода. Возможные последствия: утечки памяти, ошибуи сегментирования,
порча данных, уязвимости, взаимные блокировки и т.д.
II) Как используются мьютексы и условные переменные?
mutex.lock() --- выполняется только поток mutex. mutex.unlock() --- может
выполняться любой поток.
conditional_variable.wait() --- поток в ожидании сигнала. conditional_variable.notify() ---
--- разблокировка одного потока.
III) На что влияет выбор гранулярности блокировки?
Гранулярность --- объем данных, защищаемых блокировкой. Влияет на производительность.
IV) Когда возникает взимоблокировка и как ее предотвратить?
Взамоблокировка --- несколько процессов находятся в состоянии ожидания ресурсов,
занятых друг другом,  ни один из них не может продолжать свое выполнение.
Для предотвращения нужно всегда отпускать захваченные мьютексы в обратном порядке
и соблюдать один и тот же порядок их захвата. В операционных системах используется
алгоритм Банкира.