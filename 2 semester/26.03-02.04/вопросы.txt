I) Что такое контексное переключение задач?
Процесс прекращения выполнения процессором одной задачи с сохранением всей
необходимой информации и состояния, необходимых для последующего продолжения с
прерванного места, и восстановления и загрузки состояния задачи, к выполнению
которой переходит процессор.
II) Назовите основные подходы к организации параллелизма.
Процесс --- экземпляр программы, которому выделены отдельные ресурсы. Процессы
не могут обмениваться данными друг с другом.
Поток использует то же самое пространство, что и процесс, но при этом потоки
пользуются одними и теми же данными.
III) Что может влиять на производительность параллельных алгоритмов?
Число используемых потоков, распределение вычислений между потоками, затраты
системы на планирование и переключение потоков.
IV) Как в стандартной библиотеке реализована концепция асинхронного исполнения?
Для получения информации с других потоков используется класс std::future,
но при этом он не может контролировать данные, поступающие в поток. Для этого
используются классы std::packaged_task и std::promise и функция std::async.
Другие потоки работают независимо друг от друга, пока не будет вызван метод
get(). Тогда текущий поток прерывается в ожидании окончания вычислений другого
потока.
V) Что нужно учитывать при замене последовательной реализации алгоритма на
параллельную?
необходимо удостовериться в эффективности параллельного алгоритма для используемых
данных.